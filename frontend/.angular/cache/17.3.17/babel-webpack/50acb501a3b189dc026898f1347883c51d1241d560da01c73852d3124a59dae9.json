{"ast":null,"code":"import { importProvidersFrom, APP_INITIALIZER } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { routes } from './app.routes';\nimport { authInterceptor } from './core/interceptors/auth.interceptor';\nimport { AuthService } from './core/services/auth.service';\n// Initialize auth service to check for existing tokens\nfunction initializeAuth(authService) {\n  return () => {\n    // This ensures AuthService checks for existing auth and waits for completion\n    console.log('Initializing auth service...');\n    return authService.initializeAuth();\n  };\n}\nexport const appConfig = {\n  providers: [provideRouter(routes), provideHttpClient(withInterceptors([authInterceptor])), importProvidersFrom(BrowserAnimationsModule), {\n    provide: APP_INITIALIZER,\n    useFactory: initializeAuth,\n    deps: [AuthService],\n    multi: true\n  }]\n};","map":{"version":3,"names":["importProvidersFrom","APP_INITIALIZER","provideRouter","provideHttpClient","withInterceptors","BrowserAnimationsModule","routes","authInterceptor","AuthService","initializeAuth","authService","console","log","appConfig","providers","provide","useFactory","deps","multi"],"sources":["C:\\Users\\juanm\\source\\football_pool\\frontend\\src\\app\\app.config.ts"],"sourcesContent":["import { ApplicationConfig, importProvidersFrom, APP_INITIALIZER } from '@angular/core';\r\nimport { provideRouter } from '@angular/router';\r\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { routes } from './app.routes';\r\nimport { authInterceptor } from './core/interceptors/auth.interceptor';\r\nimport { AuthService } from './core/services/auth.service';\r\n\r\n// Initialize auth service to check for existing tokens\r\nfunction initializeAuth(authService: AuthService) {\r\n  return () => {\r\n    // This ensures AuthService checks for existing auth and waits for completion\r\n    console.log('Initializing auth service...');\r\n    return authService.initializeAuth();\r\n  };\r\n}\r\n\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideHttpClient(withInterceptors([authInterceptor])),\r\n    importProvidersFrom(BrowserAnimationsModule),\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: initializeAuth,\r\n      deps: [AuthService],\r\n      multi: true\r\n    }\r\n  ]\r\n};\r\n"],"mappings":"AAAA,SAA4BA,mBAAmB,EAAEC,eAAe,QAAQ,eAAe;AACvF,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAC1E,SAASC,uBAAuB,QAAQ,sCAAsC;AAE9E,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,eAAe,QAAQ,sCAAsC;AACtE,SAASC,WAAW,QAAQ,8BAA8B;AAE1D;AACA,SAASC,cAAcA,CAACC,WAAwB;EAC9C,OAAO,MAAK;IACV;IACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,OAAOF,WAAW,CAACD,cAAc,EAAE;EACrC,CAAC;AACH;AAEA,OAAO,MAAMI,SAAS,GAAsB;EAC1CC,SAAS,EAAE,CACTZ,aAAa,CAACI,MAAM,CAAC,EACrBH,iBAAiB,CAACC,gBAAgB,CAAC,CAACG,eAAe,CAAC,CAAC,CAAC,EACtDP,mBAAmB,CAACK,uBAAuB,CAAC,EAC5C;IACEU,OAAO,EAAEd,eAAe;IACxBe,UAAU,EAAEP,cAAc;IAC1BQ,IAAI,EAAE,CAACT,WAAW,CAAC;IACnBU,KAAK,EAAE;GACR;CAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}