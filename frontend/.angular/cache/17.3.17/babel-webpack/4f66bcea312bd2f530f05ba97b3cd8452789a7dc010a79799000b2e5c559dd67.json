{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.tokenKey = 'nfl_picks_token';\n    // Don't initialize here - let APP_INITIALIZER handle it\n  }\n  // Method for APP_INITIALIZER to call\n  initializeAuth() {\n    return new Promise(resolve => {\n      const token = this.getToken();\n      if (token) {\n        // Token exists, verify it's still valid by getting user profile\n        this.getProfile().subscribe({\n          next: response => {\n            console.log('User authenticated on app start:', response.user.email);\n            resolve();\n          },\n          error: error => {\n            console.log('Token expired or invalid, logging out');\n            this.logout();\n            resolve();\n          }\n        });\n      } else {\n        // No token, resolve immediately\n        resolve();\n      }\n    });\n  }\n  get isAuthenticated() {\n    return !!this.getToken();\n  }\n  get isAdmin() {\n    return this.currentUserSubject.value?.isAdmin || false;\n  }\n  get currentUser() {\n    return this.currentUserSubject.value;\n  }\n  login(credentials) {\n    return this.http.post(`${environment.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n      this.setToken(response.token);\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${environment.apiUrl}/auth/register`, userData).pipe(tap(response => {\n      this.setToken(response.token);\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  logout() {\n    this.removeToken();\n    this.currentUserSubject.next(null);\n  }\n  getProfile() {\n    return this.http.get(`${environment.apiUrl}/auth/profile`).pipe(tap(response => {\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  loadCurrentUser() {\n    const token = this.getToken();\n    if (token) {\n      this.getProfile().subscribe({\n        error: () => {\n          this.logout();\n        }\n      });\n    }\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  removeToken() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","currentUserSubject","currentUser$","asObservable","tokenKey","initializeAuth","Promise","resolve","token","getToken","getProfile","subscribe","next","response","console","log","user","email","error","logout","isAuthenticated","isAdmin","value","currentUser","login","credentials","post","apiUrl","pipe","setToken","register","userData","removeToken","get","loadCurrentUser","localStorage","getItem","setItem","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\juanm\\source\\football_pool\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { \r\n  AuthResponse, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  User \r\n} from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  private tokenKey = 'nfl_picks_token';\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Don't initialize here - let APP_INITIALIZER handle it\r\n  }\r\n\r\n  // Method for APP_INITIALIZER to call\r\n  initializeAuth(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        // Token exists, verify it's still valid by getting user profile\r\n        this.getProfile().subscribe({\r\n          next: (response) => {\r\n            console.log('User authenticated on app start:', response.user.email);\r\n            resolve();\r\n          },\r\n          error: (error) => {\r\n            console.log('Token expired or invalid, logging out');\r\n            this.logout();\r\n            resolve();\r\n          }\r\n        });\r\n      } else {\r\n        // No token, resolve immediately\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  get isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  get isAdmin(): boolean {\r\n    return this.currentUserSubject.value?.isAdmin || false;\r\n  }\r\n\r\n  get currentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${environment.apiUrl}/auth/login`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          this.setToken(response.token);\r\n          this.currentUserSubject.next(response.user);\r\n        })\r\n      );\r\n  }\r\n\r\n  register(userData: RegisterRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${environment.apiUrl}/auth/register`, userData)\r\n      .pipe(\r\n        tap(response => {\r\n          this.setToken(response.token);\r\n          this.currentUserSubject.next(response.user);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    this.removeToken();\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  getProfile(): Observable<{ user: User }> {\r\n    return this.http.get<{ user: User }>(`${environment.apiUrl}/auth/profile`)\r\n      .pipe(\r\n        tap(response => {\r\n          this.currentUserSubject.next(response.user);\r\n        })\r\n      );\r\n  }\r\n\r\n  private loadCurrentUser(): void {\r\n    const token = this.getToken();\r\n    if (token) {\r\n      this.getProfile().subscribe({\r\n        error: () => {\r\n          this.logout();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  private setToken(token: string): void {\r\n    localStorage.setItem(this.tokenKey, token);\r\n  }\r\n\r\n  private removeToken(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}