{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TeamLogoService {\n  constructor() {\n    this.logoBaseUrl = 'https://a.espncdn.com/i/teamlogos/nfl/500';\n    // NFL team abbreviation to ESPN logo mapping\n    this.teamLogoMap = {\n      // AFC East\n      'BUF': 'buf.png',\n      'MIA': 'mia.png',\n      'NE': 'ne.png',\n      'NYJ': 'nyj.png',\n      // AFC North\n      'BAL': 'bal.png',\n      'CIN': 'cin.png',\n      'CLE': 'cle.png',\n      'PIT': 'pit.png',\n      // AFC South\n      'HOU': 'hou.png',\n      'IND': 'ind.png',\n      'JAX': 'jax.png',\n      'TEN': 'ten.png',\n      // AFC West\n      'DEN': 'den.png',\n      'KC': 'kc.png',\n      'LV': 'lv.png',\n      'LAC': 'lac.png',\n      // NFC East\n      'DAL': 'dal.png',\n      'NYG': 'nyg.png',\n      'PHI': 'phi.png',\n      'WAS': 'wsh.png',\n      // NFC North\n      'CHI': 'chi.png',\n      'DET': 'det.png',\n      'GB': 'gb.png',\n      'MIN': 'min.png',\n      // NFC South\n      'ATL': 'atl.png',\n      'CAR': 'car.png',\n      'NO': 'no.png',\n      'TB': 'tb.png',\n      // NFC West\n      'ARI': 'ari.png',\n      'LAR': 'lar.png',\n      'SF': 'sf.png',\n      'SEA': 'sea.png'\n    };\n    // Alternative team name mappings for flexibility\n    this.teamNameMap = {\n      'Buffalo Bills': 'BUF',\n      'Miami Dolphins': 'MIA',\n      'New England Patriots': 'NE',\n      'New York Jets': 'NYJ',\n      'Baltimore Ravens': 'BAL',\n      'Cincinnati Bengals': 'CIN',\n      'Cleveland Browns': 'CLE',\n      'Pittsburgh Steelers': 'PIT',\n      'Houston Texans': 'HOU',\n      'Indianapolis Colts': 'IND',\n      'Jacksonville Jaguars': 'JAX',\n      'Tennessee Titans': 'TEN',\n      'Denver Broncos': 'DEN',\n      'Kansas City Chiefs': 'KC',\n      'Las Vegas Raiders': 'LV',\n      'Los Angeles Chargers': 'LAC',\n      'Dallas Cowboys': 'DAL',\n      'New York Giants': 'NYG',\n      'Philadelphia Eagles': 'PHI',\n      'Washington Commanders': 'WAS',\n      'Chicago Bears': 'CHI',\n      'Detroit Lions': 'DET',\n      'Green Bay Packers': 'GB',\n      'Minnesota Vikings': 'MIN',\n      'Atlanta Falcons': 'ATL',\n      'Carolina Panthers': 'CAR',\n      'New Orleans Saints': 'NO',\n      'Tampa Bay Buccaneers': 'TB',\n      'Arizona Cardinals': 'ARI',\n      'Los Angeles Rams': 'LAR',\n      'San Francisco 49ers': 'SF',\n      'Seattle Seahawks': 'SEA'\n    };\n  }\n  getTeamLogo(teamIdentifier) {\n    if (!teamIdentifier) {\n      return this.getDefaultLogo();\n    }\n    // Clean the input\n    const cleanIdentifier = teamIdentifier.trim();\n    // Try direct abbreviation lookup first\n    if (this.teamLogoMap[cleanIdentifier]) {\n      return `${this.logoBaseUrl}/${this.teamLogoMap[cleanIdentifier]}`;\n    }\n    // Try team name lookup\n    if (this.teamNameMap[cleanIdentifier]) {\n      const abbreviation = this.teamNameMap[cleanIdentifier];\n      return `${this.logoBaseUrl}/${this.teamLogoMap[abbreviation]}`;\n    }\n    // Try partial matching for team names\n    const matchedTeam = Object.keys(this.teamNameMap).find(name => name.toLowerCase().includes(cleanIdentifier.toLowerCase()) || cleanIdentifier.toLowerCase().includes(name.toLowerCase()));\n    if (matchedTeam) {\n      const abbreviation = this.teamNameMap[matchedTeam];\n      return `${this.logoBaseUrl}/${this.teamLogoMap[abbreviation]}`;\n    }\n    // Try to extract abbreviation from longer strings\n    const abbreviationMatch = cleanIdentifier.match(/\\b([A-Z]{2,4})\\b/);\n    if (abbreviationMatch && this.teamLogoMap[abbreviationMatch[1]]) {\n      return `${this.logoBaseUrl}/${this.teamLogoMap[abbreviationMatch[1]]}`;\n    }\n    // Return default logo if no match found\n    return this.getDefaultLogo();\n  }\n  getTeamAbbreviation(teamIdentifier) {\n    if (!teamIdentifier) return '';\n    const cleanIdentifier = teamIdentifier.trim();\n    // If it's already an abbreviation\n    if (this.teamLogoMap[cleanIdentifier]) {\n      return cleanIdentifier;\n    }\n    // If it's a team name\n    if (this.teamNameMap[cleanIdentifier]) {\n      return this.teamNameMap[cleanIdentifier];\n    }\n    // Try partial matching\n    const matchedTeam = Object.keys(this.teamNameMap).find(name => name.toLowerCase().includes(cleanIdentifier.toLowerCase()));\n    if (matchedTeam) {\n      return this.teamNameMap[matchedTeam];\n    }\n    // Extract abbreviation from string\n    const abbreviationMatch = cleanIdentifier.match(/\\b([A-Z]{2,4})\\b/);\n    if (abbreviationMatch && this.teamLogoMap[abbreviationMatch[1]]) {\n      return abbreviationMatch[1];\n    }\n    return cleanIdentifier.substring(0, 3).toUpperCase();\n  }\n  getDefaultLogo() {\n    // Return NFL shield logo as default\n    return 'https://a.espncdn.com/i/teamlogos/leagues/500/nfl.png';\n  }\n  // Get all team logos for preloading\n  getAllTeamLogos() {\n    return Object.entries(this.teamNameMap).map(([name, abbreviation]) => ({\n      abbreviation,\n      name,\n      logo: this.getTeamLogo(abbreviation)\n    }));\n  }\n  // Preload images for better performance\n  preloadTeamLogos() {\n    Object.values(this.teamLogoMap).forEach(logoFile => {\n      const img = new Image();\n      img.src = `${this.logoBaseUrl}/${logoFile}`;\n    });\n  }\n  static {\n    this.ɵfac = function TeamLogoService_Factory(t) {\n      return new (t || TeamLogoService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TeamLogoService,\n      factory: TeamLogoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["TeamLogoService","constructor","logoBaseUrl","teamLogoMap","teamNameMap","getTeamLogo","teamIdentifier","getDefaultLogo","cleanIdentifier","trim","abbreviation","matchedTeam","Object","keys","find","name","toLowerCase","includes","abbreviationMatch","match","getTeamAbbreviation","substring","toUpperCase","getAllTeamLogos","entries","map","logo","preloadTeamLogos","values","forEach","logoFile","img","Image","src","factory","ɵfac","providedIn"],"sources":["C:\\Users\\juanm\\source\\football_pool\\frontend\\src\\app\\core\\services\\team-logo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamLogoService {\r\n  \r\n  private readonly logoBaseUrl = 'https://a.espncdn.com/i/teamlogos/nfl/500';\r\n  \r\n  // NFL team abbreviation to ESPN logo mapping\r\n  private readonly teamLogoMap: { [key: string]: string } = {\r\n    // AFC East\r\n    'BUF': 'buf.png',\r\n    'MIA': 'mia.png',\r\n    'NE': 'ne.png',\r\n    'NYJ': 'nyj.png',\r\n    \r\n    // AFC North\r\n    'BAL': 'bal.png',\r\n    'CIN': 'cin.png',\r\n    'CLE': 'cle.png',\r\n    'PIT': 'pit.png',\r\n    \r\n    // AFC South\r\n    'HOU': 'hou.png',\r\n    'IND': 'ind.png',\r\n    'JAX': 'jax.png',\r\n    'TEN': 'ten.png',\r\n    \r\n    // AFC West\r\n    'DEN': 'den.png',\r\n    'KC': 'kc.png',\r\n    'LV': 'lv.png',\r\n    'LAC': 'lac.png',\r\n    \r\n    // NFC East\r\n    'DAL': 'dal.png',\r\n    'NYG': 'nyg.png',\r\n    'PHI': 'phi.png',\r\n    'WAS': 'wsh.png',\r\n    \r\n    // NFC North\r\n    'CHI': 'chi.png',\r\n    'DET': 'det.png',\r\n    'GB': 'gb.png',\r\n    'MIN': 'min.png',\r\n    \r\n    // NFC South\r\n    'ATL': 'atl.png',\r\n    'CAR': 'car.png',\r\n    'NO': 'no.png',\r\n    'TB': 'tb.png',\r\n    \r\n    // NFC West\r\n    'ARI': 'ari.png',\r\n    'LAR': 'lar.png',\r\n    'SF': 'sf.png',\r\n    'SEA': 'sea.png'\r\n  };\r\n\r\n  // Alternative team name mappings for flexibility\r\n  private readonly teamNameMap: { [key: string]: string } = {\r\n    'Buffalo Bills': 'BUF',\r\n    'Miami Dolphins': 'MIA',\r\n    'New England Patriots': 'NE',\r\n    'New York Jets': 'NYJ',\r\n    'Baltimore Ravens': 'BAL',\r\n    'Cincinnati Bengals': 'CIN',\r\n    'Cleveland Browns': 'CLE',\r\n    'Pittsburgh Steelers': 'PIT',\r\n    'Houston Texans': 'HOU',\r\n    'Indianapolis Colts': 'IND',\r\n    'Jacksonville Jaguars': 'JAX',\r\n    'Tennessee Titans': 'TEN',\r\n    'Denver Broncos': 'DEN',\r\n    'Kansas City Chiefs': 'KC',\r\n    'Las Vegas Raiders': 'LV',\r\n    'Los Angeles Chargers': 'LAC',\r\n    'Dallas Cowboys': 'DAL',\r\n    'New York Giants': 'NYG',\r\n    'Philadelphia Eagles': 'PHI',\r\n    'Washington Commanders': 'WAS',\r\n    'Chicago Bears': 'CHI',\r\n    'Detroit Lions': 'DET',\r\n    'Green Bay Packers': 'GB',\r\n    'Minnesota Vikings': 'MIN',\r\n    'Atlanta Falcons': 'ATL',\r\n    'Carolina Panthers': 'CAR',\r\n    'New Orleans Saints': 'NO',\r\n    'Tampa Bay Buccaneers': 'TB',\r\n    'Arizona Cardinals': 'ARI',\r\n    'Los Angeles Rams': 'LAR',\r\n    'San Francisco 49ers': 'SF',\r\n    'Seattle Seahawks': 'SEA'\r\n  };\r\n\r\n  getTeamLogo(teamIdentifier: string): string {\r\n    if (!teamIdentifier) {\r\n      return this.getDefaultLogo();\r\n    }\r\n\r\n    // Clean the input\r\n    const cleanIdentifier = teamIdentifier.trim();\r\n    \r\n    // Try direct abbreviation lookup first\r\n    if (this.teamLogoMap[cleanIdentifier]) {\r\n      return `${this.logoBaseUrl}/${this.teamLogoMap[cleanIdentifier]}`;\r\n    }\r\n\r\n    // Try team name lookup\r\n    if (this.teamNameMap[cleanIdentifier]) {\r\n      const abbreviation = this.teamNameMap[cleanIdentifier];\r\n      return `${this.logoBaseUrl}/${this.teamLogoMap[abbreviation]}`;\r\n    }\r\n\r\n    // Try partial matching for team names\r\n    const matchedTeam = Object.keys(this.teamNameMap).find(name => \r\n      name.toLowerCase().includes(cleanIdentifier.toLowerCase()) ||\r\n      cleanIdentifier.toLowerCase().includes(name.toLowerCase())\r\n    );\r\n\r\n    if (matchedTeam) {\r\n      const abbreviation = this.teamNameMap[matchedTeam];\r\n      return `${this.logoBaseUrl}/${this.teamLogoMap[abbreviation]}`;\r\n    }\r\n\r\n    // Try to extract abbreviation from longer strings\r\n    const abbreviationMatch = cleanIdentifier.match(/\\b([A-Z]{2,4})\\b/);\r\n    if (abbreviationMatch && this.teamLogoMap[abbreviationMatch[1]]) {\r\n      return `${this.logoBaseUrl}/${this.teamLogoMap[abbreviationMatch[1]]}`;\r\n    }\r\n\r\n    // Return default logo if no match found\r\n    return this.getDefaultLogo();\r\n  }\r\n\r\n  getTeamAbbreviation(teamIdentifier: string): string {\r\n    if (!teamIdentifier) return '';\r\n\r\n    const cleanIdentifier = teamIdentifier.trim();\r\n    \r\n    // If it's already an abbreviation\r\n    if (this.teamLogoMap[cleanIdentifier]) {\r\n      return cleanIdentifier;\r\n    }\r\n\r\n    // If it's a team name\r\n    if (this.teamNameMap[cleanIdentifier]) {\r\n      return this.teamNameMap[cleanIdentifier];\r\n    }\r\n\r\n    // Try partial matching\r\n    const matchedTeam = Object.keys(this.teamNameMap).find(name => \r\n      name.toLowerCase().includes(cleanIdentifier.toLowerCase())\r\n    );\r\n\r\n    if (matchedTeam) {\r\n      return this.teamNameMap[matchedTeam];\r\n    }\r\n\r\n    // Extract abbreviation from string\r\n    const abbreviationMatch = cleanIdentifier.match(/\\b([A-Z]{2,4})\\b/);\r\n    if (abbreviationMatch && this.teamLogoMap[abbreviationMatch[1]]) {\r\n      return abbreviationMatch[1];\r\n    }\r\n\r\n    return cleanIdentifier.substring(0, 3).toUpperCase();\r\n  }\r\n\r\n  private getDefaultLogo(): string {\r\n    // Return NFL shield logo as default\r\n    return 'https://a.espncdn.com/i/teamlogos/leagues/500/nfl.png';\r\n  }\r\n\r\n  // Get all team logos for preloading\r\n  getAllTeamLogos(): { abbreviation: string, name: string, logo: string }[] {\r\n    return Object.entries(this.teamNameMap).map(([name, abbreviation]) => ({\r\n      abbreviation,\r\n      name,\r\n      logo: this.getTeamLogo(abbreviation)\r\n    }));\r\n  }\r\n\r\n  // Preload images for better performance\r\n  preloadTeamLogos(): void {\r\n    Object.values(this.teamLogoMap).forEach(logoFile => {\r\n      const img = new Image();\r\n      img.src = `${this.logoBaseUrl}/${logoFile}`;\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}