{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.tokenKey = 'nfl_picks_token';\n      this.loadCurrentUser();\n    }\n    get isAuthenticated() {\n      return !!this.getToken();\n    }\n    get isAdmin() {\n      return this.currentUserSubject.value?.isAdmin || false;\n    }\n    get currentUser() {\n      return this.currentUserSubject.value;\n    }\n    login(credentials) {\n      return this.http.post(`${environment.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n        this.setToken(response.token);\n        this.currentUserSubject.next(response.user);\n      }));\n    }\n    register(userData) {\n      return this.http.post(`${environment.apiUrl}/auth/register`, userData).pipe(tap(response => {\n        this.setToken(response.token);\n        this.currentUserSubject.next(response.user);\n      }));\n    }\n    logout() {\n      this.removeToken();\n      this.currentUserSubject.next(null);\n    }\n    getProfile() {\n      return this.http.get(`${environment.apiUrl}/auth/profile`).pipe(tap(response => {\n        this.currentUserSubject.next(response.user);\n      }));\n    }\n    loadCurrentUser() {\n      const token = this.getToken();\n      if (token) {\n        this.getProfile().subscribe({\n          error: () => {\n            this.logout();\n          }\n        });\n      }\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    setToken(token) {\n      localStorage.setItem(this.tokenKey, token);\n    }\n    removeToken() {\n      localStorage.removeItem(this.tokenKey);\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}