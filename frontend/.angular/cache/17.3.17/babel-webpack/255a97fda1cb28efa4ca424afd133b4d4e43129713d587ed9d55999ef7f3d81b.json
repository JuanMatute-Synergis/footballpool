{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.tokenKey = 'nfl_picks_token';\n    this.loadCurrentUser();\n  }\n  get isAuthenticated() {\n    return !!this.getToken();\n  }\n  get isAdmin() {\n    return this.currentUserSubject.value?.isAdmin || false;\n  }\n  get currentUser() {\n    return this.currentUserSubject.value;\n  }\n  login(credentials) {\n    return this.http.post(`${environment.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n      this.setToken(response.token);\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${environment.apiUrl}/auth/register`, userData).pipe(tap(response => {\n      this.setToken(response.token);\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  logout() {\n    this.removeToken();\n    this.currentUserSubject.next(null);\n  }\n  getProfile() {\n    return this.http.get(`${environment.apiUrl}/auth/profile`).pipe(tap(response => {\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  loadCurrentUser() {\n    const token = this.getToken();\n    if (token) {\n      this.getProfile().subscribe({\n        error: () => {\n          this.logout();\n        }\n      });\n    }\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  removeToken() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","currentUserSubject","currentUser$","asObservable","tokenKey","loadCurrentUser","isAuthenticated","getToken","isAdmin","value","currentUser","login","credentials","post","apiUrl","pipe","response","setToken","token","next","user","register","userData","logout","removeToken","getProfile","get","subscribe","error","localStorage","getItem","setItem","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\juanm\\source\\football_pool\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { \r\n  AuthResponse, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  User \r\n} from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  private tokenKey = 'nfl_picks_token';\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadCurrentUser();\r\n  }\r\n\r\n  get isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  get isAdmin(): boolean {\r\n    return this.currentUserSubject.value?.isAdmin || false;\r\n  }\r\n\r\n  get currentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${environment.apiUrl}/auth/login`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          this.setToken(response.token);\r\n          this.currentUserSubject.next(response.user);\r\n        })\r\n      );\r\n  }\r\n\r\n  register(userData: RegisterRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${environment.apiUrl}/auth/register`, userData)\r\n      .pipe(\r\n        tap(response => {\r\n          this.setToken(response.token);\r\n          this.currentUserSubject.next(response.user);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    this.removeToken();\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  getProfile(): Observable<{ user: User }> {\r\n    return this.http.get<{ user: User }>(`${environment.apiUrl}/auth/profile`)\r\n      .pipe(\r\n        tap(response => {\r\n          this.currentUserSubject.next(response.user);\r\n        })\r\n      );\r\n  }\r\n\r\n  private loadCurrentUser(): void {\r\n    const token = this.getToken();\r\n    if (token) {\r\n      this.getProfile().subscribe({\r\n        error: () => {\r\n          this.logout();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  private setToken(token: string): void {\r\n    localStorage.setItem(this.tokenKey, token);\r\n  }\r\n\r\n  private removeToken(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}