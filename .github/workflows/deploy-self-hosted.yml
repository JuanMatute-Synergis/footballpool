name: Deploy to Self-Hosted Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create data backup before deployment
      run: |
        echo "Creating backup before deployment..."
        if [ -f "./data/database.sqlite" ]; then
          cp ./data/database.sqlite ./data/database.sqlite.backup.$(date +%Y%m%d_%H%M%S)
          echo "‚úÖ Database backup created"
          # Verify backup
          ls -la ./data/database.sqlite*
          
          # Also backup to Google Drive if configured
          if command -v rclone &> /dev/null && rclone lsd gdrive: > /dev/null 2>&1; then
            echo "üì§ Creating deployment backup to Google Drive..."
            ./scripts/backup-to-gdrive.sh || echo "‚ö†Ô∏è Google Drive backup failed (continuing deployment)"
          else
            echo "‚ÑπÔ∏è Google Drive backup not configured"
          fi
        else
          echo "‚ÑπÔ∏è No existing database found"
        fi

    - name: Stop existing containers gracefully
      run: |
        echo "Stopping existing containers gracefully..."
        docker compose stop || true
        sleep 5

    - name: Verify data directory before rebuild
      run: |
        echo "=== Data directory before rebuild ==="
        ls -la ./data/ || echo "No data directory found"
        if [ -f "./data/database.sqlite" ]; then
          echo "Database size: $(du -h ./data/database.sqlite)"
        fi

    - name: Build containers without removing volumes
      run: |
        echo "Building containers while preserving data..."
        docker compose build

    - name: Create temporary data backup during deployment
      run: |
        if [ -f "./data/database.sqlite" ]; then
          echo "Creating temporary backup during deployment..."
          cp ./data/database.sqlite ./data/database.sqlite.deploy.backup
          echo "Temporary backup created"
        fi

    - name: Start containers with preserved data
      run: |
        echo "Starting containers with preserved data..."
        docker compose up -d

    - name: Restore data if lost during deployment
      run: |
        sleep 10
        # Check if database was reset
        user_count=$(curl -s http://localhost:3001/api/auth/health | jq -r '.user_count // "0"')
        echo "Current user count: $user_count"
        
        if [ "$user_count" = "0" ] && [ -f "./data/database.sqlite.deploy.backup" ]; then
          echo "‚ö†Ô∏è Database was reset during deployment, restoring from backup..."
          docker compose down
          cp ./data/database.sqlite.deploy.backup ./data/database.sqlite
          docker compose up -d
          sleep 10
          
          # Verify restoration
          user_count=$(curl -s http://localhost:3001/api/auth/health | jq -r '.user_count // "0"')
          echo "User count after restoration: $user_count"
        fi
        
        # Clean up temporary backup
        rm -f ./data/database.sqlite.deploy.backup

    - name: Verify data after deployment
      run: |
        echo "=== Data directory after deployment ==="
        ls -la ./data/ || echo "No data directory found"
        if [ -f "./data/database.sqlite" ]; then
          echo "Database size: $(du -h ./data/database.sqlite)"
        fi

    - name: Verify deployment and data integrity
      run: |
        echo "Waiting for services to be ready..."
        sleep 30
        
        echo "=== Final verification ==="
        # Check if containers are running
        docker compose ps
        
        # Check database integrity
        if [ -f "./data/database.sqlite" ]; then
          echo "‚úÖ Database file exists: $(du -h ./data/database.sqlite)"
          
          # Test API connectivity
          echo "Testing API health..."
          curl -f http://localhost:3000/api/auth/health || echo "‚ö†Ô∏è API not responding yet"
        else
          echo "‚ùå Database file missing after deployment!"
          exit 1
        fi

    - name: Deployment complete
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "Application available at: http://localhost:4200"
        echo "Backend API at: http://localhost:3000"

    - name: Health check with retries
      run: |
        echo "Performing health check..."
        
        # Show container status
        docker compose ps
        
        # Try health check with retries
        for i in {1..5}; do
          echo "Health check attempt $i/5..."
          
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/api/games/live || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed - Application is running"
            echo "üöÄ Deployment successful!"
            exit 0
          else
            echo "‚è≥ Health check failed (attempt $i/5) - HTTP status: $response"
            if [ $i -eq 5 ]; then
              echo "‚ùå All health check attempts failed"
              echo "Container logs:"
              docker compose logs --tail=20
              exit 1
            fi
            sleep 10
          fi
        done

    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== Deployment Failed - Container Status ==="
        docker compose ps
        echo "=== Container Logs ==="
        docker compose logs --tail=50
